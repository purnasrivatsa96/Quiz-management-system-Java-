/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author abhiram
 */
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
public class PhysicsModifyTrueFalseQuest1 extends java.awt.Frame {

    /**
     * Creates new form InsertPhyTrueFalseQuest
     */
     int questionNumber;
    public PhysicsModifyTrueFalseQuest1(int questionNumberToBeModified) {
        questionNumber = questionNumberToBeModified;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatement = new java.awt.Label();
        lblAction = new java.awt.Label();
        lblTrueFalse = new java.awt.Label();
        txtStatement = new java.awt.TextField();
        btnInsert = new java.awt.Button();
        btnBack = new java.awt.Button();
        txtTrueFalse = new java.awt.TextField();

        setName("Modify Physics True or False Question"); // NOI18N
        setTitle("Modify Physics True or False Question");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        setLayout(new FlowLayout());
        setSize(1000,1000);

        lblStatement.setText("Statement");
        add(lblStatement);
        lblStatement.setBounds(37, 77, 60, 20);


        lblAction.setText("Modify True or False Question");
        add(lblAction);
        lblAction.setBounds(105, 38, 167, 20);

        lblTrueFalse.setText("True or False");
        add(lblTrueFalse);
        lblTrueFalse.setBounds(37, 124, 77, 20);
        add(txtStatement);
        txtStatement.setBounds(124, 77, 223, 20);

        btnInsert.setLabel("Modify Question");
        add(btnInsert);
        btnInsert.setBounds(105, 209, 103, 24);
        btnInsert.addActionListener(new ButtonClickListener());
        btnInsert.setActionCommand("modify");

        btnBack.setLabel("Back");
        btnBack.setActionCommand("back");
        add(btnBack);
        btnBack.setBounds(304, 243, 43, 24);
        btnBack.addActionListener(new ButtonClickListener());

        txtTrueFalse.setText("Enter True or False");
        add(txtTrueFalse);
        txtTrueFalse.setBounds(124, 124, 142, 20);

        

        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhysicsInsertTrueFalseQuest().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnBack;
    private java.awt.Button btnInsert;
    private java.awt.Label lblAction;
    private java.awt.Label lblStatement;
    private java.awt.Label lblTrueFalse;
    private java.awt.TextField txtStatement;
    private java.awt.TextField txtTrueFalse;
    String filenameQuest;
    String filenameAns;
    // End of variables declaration//GEN-END:variables

    public class ButtonClickListener implements ActionListener{
        public void actionPerformed(ActionEvent e){
            String command = e.getActionCommand();
            if(command.equals("back")){
                btnBack.getParent().setVisible(false);
                new PhysicsModifyQuestion().setVisible(true);
            }
            else{
                if(Subject.Subject.equals("phy")){
                    filenameQuest = ("PhysicsQuestions.txt");
                    filenameAns = ("PhysicsAnswers.txt");
                }
                if(Subject.Subject.equals("chem")){
                    filenameQuest = ("ChemistryQuestions.txt");
                    filenameAns = ("ChemAnswers.txt");
                }
                try{
                    //storing questions in file
                    FileReader fileReaderQuest = new FileReader(filenameQuest);
                    BufferedReader bufferedReaderQuest = new BufferedReader(fileReaderQuest);
                    FileReader fileReaderAns = new FileReader(filenameAns);
                    BufferedReader bufferedReaderAns = new BufferedReader(fileReaderAns);
                    
                    int answerNumber = questionNumber;
                    String strQuest;
                    String strAns;
                    String strQuestionNumber = String.valueOf(questionNumber);
                    String newQuestion = strQuestionNumber +  "." + txtStatement.getText().toString() + " -True/False";
                    String newAnswer = strQuestionNumber + "." + txtTrueFalse.getText().toString();
                    ArrayList<String> StringOfQuestions = new ArrayList<String>();
                    ArrayList<String> StringOfAnswers = new ArrayList<String>();
                    while((strQuest = bufferedReaderQuest.readLine())!=null){
                        StringOfQuestions.add(strQuest);
                    }
                    while((strAns=bufferedReaderAns.readLine())!=null){
                        StringOfAnswers.add(strAns);
                    }
                    FileWriter fileWriterQuest = new FileWriter(filenameQuest,false);
                    BufferedWriter bufferedWriterQuest = new BufferedWriter(fileWriterQuest);
                    FileWriter fileWriterAns = new FileWriter(filenameAns,false);
                    BufferedWriter bufferedWriterAns = new BufferedWriter(fileWriterAns);
                    try{
                       StringOfQuestions.set((questionNumber-1),newQuestion);
                        StringOfAnswers.set((questionNumber-1),newAnswer);
                    for(int i=0;i<StringOfQuestions.size();i++){
                        bufferedWriterQuest.write(StringOfQuestions.get(i));
                        bufferedWriterQuest.newLine();
                        bufferedWriterAns.write(StringOfAnswers.get(i));
                        bufferedWriterAns.newLine();
                    }
                     bufferedWriterQuest.close();
                     bufferedWriterAns.close();
                    }
                    catch(Exception ex){
                        System.out.println("Questions list is empty");
                    }
                    

                }
                catch(IOException ex){
                    System.out.println("error");
                }
            }

        }

    }
}
