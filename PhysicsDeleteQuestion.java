/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author abhiram
 */

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
public class PhysicsDeleteQuestion extends java.awt.Frame {

    /**
     * Creates new form InsertPhysicsQuestion
     */
    public PhysicsDeleteQuestion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpQuestionType = new javax.swing.ButtonGroup();
        btnBack = new java.awt.Button();
        lblDisplay = new java.awt.Label();
        lblQuestionNumber = new java.awt.Label();
        txtQuestionNumber = new java.awt.TextField();
        btnDelete = new java.awt.Button();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        setLayout(new FlowLayout());
        setSize(1000,1000);

        btnBack.setLabel("Back");
        btnBack.setActionCommand("back");
        add(btnBack);
        btnBack.setBounds(268, 240, 43, 24);
        btnBack.addActionListener(new ButtonClickListener());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
         
        if(Subject.Subject.equals("phy")) 
        lblDisplay.setText("Delete Physics Question");
        else{
            lblDisplay.setText("Delete Chemistry Question");
        }

        add(lblDisplay);
        lblDisplay.setBounds(115, 45, 139, 20);


        lblQuestionNumber.setText("Question Number");
        add(lblQuestionNumber);
        lblQuestionNumber.setBounds(44, 116, 105, 20);
        add(txtQuestionNumber);
        txtQuestionNumber.setBounds(198, 116, 125, 20);

        btnDelete.setLabel("Delete");
        btnDelete.setActionCommand("delete");
        btnDelete.addActionListener(new ButtonClickListener());
        add(btnDelete);
        btnDelete.setBounds(78, 240, 52, 24);


        
        
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhysicsInsertQuestion().setVisible(true);
            }
        });
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnBack;
    private java.awt.Button btnDelete;
    private javax.swing.ButtonGroup btngrpQuestionType;
    private java.awt.Label lblDisplay;
    private java.awt.Label lblQuestionNumber;
    private java.awt.TextField txtQuestionNumber;
    String filenameQuest ;
    String filenameAns ;
    // End of variables declaration//GEN-END:variables

    public class ButtonClickListener implements ActionListener{
        public void actionPerformed(ActionEvent e){
            String command = e.getActionCommand();
            
            
            if(command.equals("back")){
                btnBack.getParent().setVisible(false);
                new PhysicsHomePage().setVisible(true);
            }
            else{
                if(Subject.Subject.equals("phy")){
                    filenameQuest = ("PhysicsQuestions.txt");
                    filenameAns = ("PhysicsAnswers.txt");
                }
                if(Subject.Subject.equals("chem")){
                    filenameQuest = ("ChemistryQuestions.txt");
                    filenameAns = ("ChemAnswers.txt");
                }
               try{
               	    String strQuestionNumber = txtQuestionNumber.getText().toString();
                    int intQuestionNumber = Integer.parseInt(strQuestionNumber);
                    String strQuestforArray;
                    String strAnsforArray;
                    FileReader fileReaderQuest = new FileReader(filenameQuest);
                    BufferedReader bufferedReaderQuest = new BufferedReader(fileReaderQuest);
                    FileReader fileReaderAns = new FileReader(filenameAns);
                    BufferedReader bufferedReaderAns = new BufferedReader(fileReaderAns);
                    ArrayList<String> StringOfQuestions = new ArrayList<String>();
                    ArrayList<String> StringOfAnswers = new ArrayList<String>();
                    while((strQuestforArray = bufferedReaderQuest.readLine())!=null){
                        StringOfQuestions.add(strQuestforArray);
                        //System.out.println(strQuestforArray);
                    }
                    while((strAnsforArray=bufferedReaderAns.readLine())!=null){
                        StringOfAnswers.add(strAnsforArray);
                        //System.out.println(strAnsforArray);
                    }
                    FileWriter fileWriterQuest = new FileWriter(filenameQuest,false);
                    BufferedWriter bufferedWriterQuest = new BufferedWriter(fileWriterQuest);
                    FileWriter fileWriterAns = new FileWriter(filenameAns,false);
                    BufferedWriter bufferedWriterAns = new BufferedWriter(fileWriterAns);
                    try{
                        StringOfQuestions.remove(intQuestionNumber-1);
                        int i=0;
                        for(String strQuest : StringOfQuestions){
                            String[] parts = strQuest.split("\\.",2);
                            String string1 = parts[0];
                            //System.out.println(string1);
                            //int QuestionNumber = 2;
                            int QuestionNumber = Integer.valueOf(string1);
                            if(QuestionNumber<intQuestionNumber){
                                bufferedWriterQuest.write(strQuest);
                                //System.out.println(parts[1]);
                                bufferedWriterQuest.newLine();
                                bufferedWriterQuest.flush();
                            }
                            else if(QuestionNumber>intQuestionNumber){
                                int oldQuestionNumber = Integer.valueOf(string1);
                                int newQuestionNumber = oldQuestionNumber - 1;
                                String strnewQuestionNumber = Integer.toString(newQuestionNumber);
                                parts[0] = strnewQuestionNumber;
                                String newQuestion = parts[0] + "." + parts[1];
                                bufferedWriterQuest.write(newQuestion);
                                //System.out.println(newQuestion);
                                bufferedWriterQuest.newLine();
                                bufferedWriterQuest.close();
                            }

                        }


                        StringOfAnswers.remove(intQuestionNumber-1);
                        int j=0;
                        for(String strAnswers : StringOfAnswers){
                            String[] parts = strAnswers.split("\\.",2);
                            String string1 = parts[0];
                            //System.out.println(parts[0]);
                            //int QuestionNumber =2;
                            int QuestionNumber = Integer.valueOf(string1);
                            if(QuestionNumber<intQuestionNumber){
                                bufferedWriterAns.write(strAnswers);
                                bufferedWriterAns.flush();
                                //System.out.println(parts[1]);
                                bufferedWriterAns.newLine();
                            }
                            else if(QuestionNumber>intQuestionNumber){
                                int oldQuestionNumber = Integer.valueOf(string1);
                                int newQuestionNumber = oldQuestionNumber - 1;
                                String strnewQuestionNumber = Integer.toString(newQuestionNumber);
                                parts[0] = strnewQuestionNumber;
                                String newQuestion = parts[0] + "." + parts[1];
                                bufferedWriterAns.write(newQuestion);
                                bufferedWriterAns.newLine();
                                bufferedWriterAns.close();
                            }
                            

                        }

                    }

                    catch(NumberFormatException nfe){
            	        System.out.println("aborting delete operation");
                    }
                    catch(IndexOutOfBoundsException iobe){
                        lblDisplay.setText("Enter valid Question No.");
                    }
                    catch(IOException ex){
                        System.out.println("Questions or answers list is empty");
                    }
                }
                
                catch(NumberFormatException nfe){
                        lblDisplay.setText("Enter Valid Question No.");
                    }
                    catch(IndexOutOfBoundsException iobe){
                        lblDisplay.setText("Enter valid Question Number");
                    }
                    catch(IOException ex){
                        System.out.println("Questions or answers list is empty");
                    }

            }

        }

    }
}


